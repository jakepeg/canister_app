// ic-docutrack/backend/service.did

// --- Core Types for Hierarchical System ---
type item_id = nat64; // New: General ID for files and folders

type item_type = variant { // New
  File;
  Folder;
};

// Public representation of an item's metadata
type public_item_metadata = record { // New: Replaces PublicFileMetadata for general listings
  id: item_id;
  name: text;
  item_type: item_type;
  parent_id: opt item_id;
  modified_at: nat64;
  size: opt nat64; // For files, null for folders
  // owner_principal: principal; // Add if frontend needs it directly in lists
};

// --- Existing types that need review/update ---
type template = record {
  name : text;
  file_names : vec text; // These might become item names within a template folder
};

type template_response = variant {
  Ok : template;
  Err : variant { not_found }; // "not_found" for a template
};

type multi_request_input = record {
  group_name : text; // This will be the name of the folder created
  file_names : vec text; // Names of files to request within that folder
  save_as_template : bool;
  // parent_id: opt item_id; // Optional: if multi-requests can target a specific parent folder
};

type multi_request_response = record {
  group_id : item_id; // ID of the created group folder
  group_alias : text; // Alias for the group folder
};

// PublicRequestGroup likely remains, but 'files' field changes
type public_request_group = record {
  group_id : item_id; // ID of the folder representing the group
  name : text;
  files : vec public_item_metadata; // Changed from file_metadata
  created_at : nat64;
};

// file_info might be used for listing files within a specific group/folder for upload
type file_info_for_upload = record { // Renamed for clarity
  item_id : item_id; // Changed from file_id
  file_name : text;
  alias : text; // Individual alias for this file item
};

// group_info is returned by get_group_by_alias
type group_info_response = record { // Renamed for clarity
  group_id : item_id; // ID of the folder representing the group
  group_name : text;
  files : vec file_info_for_upload; // List of files to be uploaded into this group
  requester : user; // The user who created this multi-request/group
};

// file_status might be deprecated or significantly rethought.
// Frontend can derive status from PublicItemMetadata (content_type, num_chunks, etc.)
// Keeping it for now if some specific logic relies on it, but mark for review.
type file_status_legacy = variant { // Renamed to indicate it's old
  pending : record { alias : text; requested_at : nat64 };
  partially_uploaded;
  uploaded : record { uploaded_at : nat64 };
};

// file_metadata (old) is replaced by public_item_metadata for most list views.
// If get_requests specifically needs to show "group" context, it might return a specialized struct.
type public_file_metadata_legacy = record { // Renamed old struct
  file_id : item_id; // was file_id
  file_name : text;
  group_name : text;
  group_alias : opt text;
  file_status : file_status_legacy;
  shared_with : vec user;
};


type user = record {
  username : text;
  public_key : blob;
  ic_principal : principal;
};

type set_user_response = variant {
  ok;
  username_exists;
};

type who_am_i_response = variant {
  known_user : user; // Changed to directly return user struct
  unknown_user;
};

// AliasInfo is for when a user follows an upload link (alias)
type alias_info_response = record { // Renamed
  item_id : item_id; // Changed from file_id
  file_name : text;  // Name of the item to be uploaded
  user : user;       // The user who requested this item
};

type get_alias_info_error = variant { // Renamed
    not_found; // Alias not found or not for a file
};


// For downloading a file chunk
type found_file_chunk = record { // Renamed from found_file for clarity
  contents : blob;
  file_type : text; // Mime type
  num_chunks : nat64; // Total chunks for the file
};

type download_file_chunk_response = variant { // Renamed
  not_found_item: null; // Item itself not found
  not_a_file: null; // Item is a folder
  not_uploaded_file: null; // File is pending or partially uploaded
  chunk_not_found: null; // Specific chunk index out of bounds
  permission_error: null;
  found_file_chunk : found_file_chunk;
};

// For the initial upload to an alias, or the first chunk of an atomic upload
type upload_file_to_item_request = record { // Renamed from upload_file_request
  item_id : item_id; // ID of the pending item (from alias_info)
  file_content : blob; // First chunk or full content
  file_type : text;    // Mime type
  num_chunks : nat64;  // Total chunks
};

// For subsequent chunks of a multi-chunk upload
type upload_chunk_continue_request = record { // Renamed from upload_file_continue_request
  item_id : item_id; // Changed from file_id
  chunk_id : nat64;
  contents : blob;
};

// General response for operations like upload, share, delete, rename
type item_operation_response = variant { // New: Generalizing FileSharingResponse
  Ok;
  Err: text; // String containing an error message (e.g., "PermissionDenied", "NotFound", "FolderNotEmpty")
};
// OR, keep more specific variants if preferred:
type item_operation_response_detailed = variant {
    Ok: null;
    PermissionError: null;
    ItemNotFound: null;
    FolderNotEmpty: null; // Example specific error
    NotAFile: null;
    NotAFolder: null;
    PendingError: null; // If trying to operate on a file not fully uploaded
    AlreadyUploaded: null; // For uploads
    NotRequested: null; // For uploads via alias
    // Add other specific errors as needed
};


// For atomic (direct) file uploads, not tied to a pre-existing alias
type upload_file_atomic_request_new = record { // Renamed
  name : text;
  content : blob; // First chunk or full content
  file_type : text;
  num_chunks : nat64;
  parent_id: opt item_id; // ID of the parent folder (null for root)
};

type upload_file_error_legacy = variant { // Renamed old error type
  already_uploaded;
  not_requested;
};
type upload_file_response_legacy = variant { // Renamed old response type
  Ok;
  Err : upload_file_error_legacy;
};


type VetkdEncryptedKeyResponse = variant { // Unchanged
  Ok : blob;
  Err : text;
};

type VetkdPublicKeyResponse = variant { // Unchanged
  Ok : blob;
  Err : text;
};

// --- Canister Management Types (largely unchanged but reviewed for consistency) ---
type CanisterInfo = record {
  id : principal;
  name : text;
};

type RegisterCanisterResponse = variant {
  Ok;
  NotAuthorized;
  VerificationFailed : text;
  AlreadyRegistered;
  InternalError : text;
};

type GetUserCanistersResponse = variant {
  Ok : vec CanisterInfo;
  NotAuthenticated;
};

type RenameCanisterResponse = variant {
  Ok;
  NotAuthorized;
  CanisterNotFound;
  InternalError : text;
};

type DeleteCanisterResponse = variant {
  Ok;
  NotAuthorized;
  CanisterNotFound;
  DeletionFailed : text;
  InternalError : text;
};


service docutrack : {
  // --- User Management ---
  set_user : (username : text, public_key : blob) -> (set_user_response);
  username_exists : (username : text) -> (bool) query;
  who_am_i : () -> (who_am_i_response) query;
  get_users : () -> (variant { Ok: vec user; Err: text }) query; // Changed to Result-like

  // --- Item & Folder Management ---
  create_folder: (name: text, parent_id: opt item_id) -> (variant { Ok: public_item_metadata; Err: text });
  list_folder_contents: (folder_id: opt item_id) -> (variant { Ok: vec public_item_metadata; Err: text }) query;
  rename_item: (item_id: item_id, new_name: text) -> (item_operation_response);
  delete_item: (item_id: item_id) -> (item_operation_response);
  move_item: (item_id: item_id, new_parent_id: opt item_id) -> (item_operation_response);

  // --- File Upload (Atomic/Direct) ---
  upload_file_atomic: (request: upload_file_atomic_request_new) -> (variant { Ok: item_id; Err: text });

  // --- File Upload (Alias-based & Chunks) ---
  request_file : (request_name : text, parent_id: opt item_id) -> (variant { Ok: text; Err: text}); // Returns alias or error
  get_alias_info : (alias : text) -> (variant { Ok : alias_info_response; Err : get_alias_info_error });
  upload_file_to_item : (request: upload_file_to_item_request) -> (item_operation_response_detailed); // Changed from upload_file
  upload_chunk_continue : (request: upload_chunk_continue_request) -> (item_operation_response_detailed); // Changed from upload_file_continue

  // --- File Download ---
  download_file_chunk : (item_id: item_id, chunk_id : nat64) -> (download_file_chunk_response) query; // Renamed

  // --- Sharing ---
  share_item : (user_to_share_with : principal, item_id : item_id) -> (item_operation_response); // Renamed
  revoke_item_share : (user_to_revoke_from : principal, item_id : item_id) -> (item_operation_response); // Renamed
  get_items_shared_with_me : () -> (vec public_item_metadata) query; // Renamed
  get_item_sharers: (item_id: item_id) -> (variant{Ok: vec user; Err: text}) query; // New: list users an item is shared with

  // --- Metadata ---
  get_item_metadata_by_id: (item_id) -> (variant { Ok: public_item_metadata; Err: text }) query;

  // --- VetKD ---
  vetkd_encrypted_key : (encryption_public_key: blob, item_id: opt item_id) -> (VetkdEncryptedKeyResponse); // item_id instead of file_id
  vetkd_public_key : () -> (VetkdPublicKeyResponse);

  // --- "Request Group" and Template features (Review if these are still primary features or integrated into folder system) ---
  multi_request : (input: multi_request_input) -> (variant { Ok: multi_request_response; Err: text });
  get_request_groups : () -> (vec public_request_group) query; // Potentially lists "group folders"
  get_group_by_alias : (alias : text) -> (variant { Ok : group_info_response; Err : get_alias_info_error });

  get_template_names : () -> (vec text) query;
  get_template : (name: text) -> (template_response) query;
  delete_template : (name: text) -> (item_operation_response);
  get_user_templates : () -> (vec template) query;


  // --- Legacy/Review Endpoints (These might be redundant or need different return types) ---
  get_my_pending_requests : () -> (vec public_item_metadata) query; // What does this list now? Owned items at root? Pending alias items?
  // get_file_owner_principal : (item_id : item_id) -> (variant { Ok : principal; Err : text }); // Replaced by owner_principal in PublicItemMetadata or get_item_metadata


  // --- Canister Management (Unchanged but ensure consistency if they interact with items) ---
  register_canister : (canister_id : principal, name : text) -> (RegisterCanisterResponse);
  get_user_canisters : () -> (GetUserCanistersResponse) query;
  rename_canister : (canister_id: principal, new_name: text) -> (RenameCanisterResponse);
  unregister_canister : (canister_id: principal) -> (DeleteCanisterResponse);

  // Example of a simple hello_world for testing canister communication
  hello_world : () -> (text) query;
};
