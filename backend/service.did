type file_id = nat64;

type template = record {
  name : text;
  file_names : vec text;
};

type template_response = variant {
  Ok : template;
  Err : variant { not_found };
};

type multi_request_input = record {
  group_name : text;
  file_names : vec text;
  save_as_template : bool;
};

type multi_request_response = record {
  group_id : nat64;
  group_alias : text;
};

type public_request_group = record {
  group_id : nat64;
  name : text;
  files : vec file_metadata;
  created_at : nat64;
};

type file_info = record {
  file_id : file_id;
  file_name : text;
  alias : text;
};

type group_info = record {
  group_id : nat64;
  group_name : text;
  files : vec file_info;
  requester : user;
};

type file_status = variant {
  pending : record { alias : text; requested_at : nat64 };
  partially_uploaded;
  uploaded : record { uploaded_at : nat64 };
};

type file_metadata = record {
  file_id : file_id;
  file_name : text;
  group_name : text;
  group_alias : opt text;
  file_status : file_status;
  shared_with : vec user;
};

// A file's contents + its metadata.
type file = record {
  metadata : file_metadata;

  // The contents of the file are available if it has been uploaded.
  contents : opt blob;
};

type user = record {
  username : text;
  public_key : blob;
  ic_principal : principal;
};

type set_user_response = variant {
  ok;
  username_exists;
};

type who_am_i_response = variant {
  known_user : record { username : text };
  unknown_user;
};

type get_alias_info_response = variant {
  Err : variant { not_found };
  Ok : record {
    file_id : file_id;
    file_name : text;
    user : user;
  };
};

type found_file = record {
  contents : blob;
  file_type : text;
  num_chunks : nat64;
};

type download_file_response = variant {
  not_found_file;
  not_uploaded_file;
  permission_error;
  found_file : found_file;
};

type upload_file_response = variant {
  Ok;
  Err : upload_file_error;
};

type upload_file_error = variant {
  // File was already uploaded.
  already_uploaded;

  // No such file is requested.
  not_requested;
};

type upload_file_atomic_request = record {
  name : text;
  content : blob;
  file_type : text;
  num_chunks : nat64;
};

type upload_file_continue_request = record {
  file_id : file_id;
  chunk_id : nat64;
  contents : blob;
};

type share_file_response = variant {
  permission_error;
  ok;
};

type get_users_response = variant {
  permission_error;
  users : vec user;
};

type upload_file_request = record {
  file_id : file_id;
  file_content : blob;
  file_type : text;
  num_chunks : nat64;
};

type VetkdEncryptedKeyResponse = variant {
  Ok : blob;
  Err : text;
};

type VetkdPublicKeyResponse = variant {
  Ok : blob;
  Err : text;
};

// --- New Types for Canister Management ---
type CanisterInfo = record {
  id : principal;
  name : text;
};

type RegisterCanisterResponse = variant {
  Ok;
  NotAuthorized;
  VerificationFailed : text;
  AlreadyRegistered;
  InternalError : text;
};

type GetUserCanistersResponse = variant {
  Ok : vec CanisterInfo;
  NotAuthenticated;
};

type CreateCanisterResponse = variant {
  Ok : principal; // The principal of the newly created canister
  Err : text; // Error message
};
// --- End New Types ---

service docutrack : {
  hello_world : () -> (text);

  set_user : (username : text, public_key : blob) -> (set_user_response);

  username_exists : (username : text) -> (bool) query;

  who_am_i : () -> (who_am_i_response) query;

  // Requests a file to be uploaded.
  // An alias is returned that can be used to create an upload link.
  request_file : (request_name : text) -> (alias : text);

  // New methods for multi-document requests
  multi_request : (multi_request_input) -> (multi_request_response);
  get_request_groups : () -> (vec public_request_group) query;
  get_group_by_alias : (alias : text) -> (variant { Ok : group_info; Err : variant { not_found } }) query;

  // Methods for working with templates
  get_template_names : () -> (vec text) query;
  get_template : (text) -> (template_response) query;
  delete_template : (text) -> ();
  get_user_templates : () -> (vec template) query;

  // Based on the alias (or download link) of the file,
  // it returns the name and id of the file to be uploaded.
  get_alias_info : (alias : text) -> (get_alias_info_response) query;

  upload_file : (upload_file_request) -> (upload_file_response);

  download_file : (file_id, chunk_id : nat64) -> (download_file_response) query;

  get_requests : () -> (vec file_metadata) query;

  get_shared_files : () -> (vec file_metadata) query;

  get_file_owner_principal : (file_id : nat64) -> (variant { Ok : blob; Err : text }) query;

  upload_file_atomic : (upload_file_atomic_request) -> (file_id);

  upload_file_continue : (upload_file_continue_request) -> ();

  share_file : (user_id : principal, file_id : file_id) -> (share_file_response);

  share_file_with_users : (user_id : vec principal, file_id : file_id) -> ();

  revoke_share : (user_id : principal, file_id : file_id) -> (share_file_response);

  get_users : () -> (get_users_response) query;

  vetkd_encrypted_key : (blob, opt nat64) -> (VetkdEncryptedKeyResponse);

  vetkd_public_key : () -> (VetkdPublicKeyResponse);

  delete_file : (file_id : file_id) -> (share_file_response);
  rename_file : (file_id : file_id, new_name : text) -> (share_file_response);

  // --- New Canister Management Methods ---
  register_canister : (canister_id : principal, name : text) -> (RegisterCanisterResponse);
  get_user_canisters : () -> (GetUserCanistersResponse) query;
  create_new_file_canister : (name : text) -> (CreateCanisterResponse);
  // --- End New Methods ---
};
